package lab1_bolkunov_java.UI;

import lab1_bolkunov_java.Transport.Extensions.IExtension;
import lab1_bolkunov_java.Transport.ITransport;
import lab1_bolkunov_java.Transport.MotorShip;
import lab1_bolkunov_java.Transport.Pier;
import lab1_bolkunov_java.Transport.Ship;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class PierDialog extends JFrame {
    private Random rnd = new Random();

    private JPanel mainPanel;
    private JPanel pierPanel;
    private JButton createMotorShipButton;
    private JButton createShipButton;
    private JSpinner pierPlaceSpinner;
    private JButton takeShipButton;
    private JPanel controlsPanel;

    public PierDialog() {
        $$$setupUI$$$();
        setContentPane(mainPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        createShipButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                Color mainColor = JColorChooser.showDialog(mainPanel, "Выберете основной цвет", Color.pink);
                ITransport transport = new Ship(100 + rnd.nextInt(200), 1000 + rnd.nextInt(1000), mainColor);
                if (((PierPanel) pierPanel).getPier().add(transport)) {
                    ((PierPanel) pierPanel).redraw();
                } else {
                    showDialog("Причал переполнен");
                }
                ((PierPanel) pierPanel).redraw();
            }
        });
        createMotorShipButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                Color mainColor = JColorChooser.showDialog(mainPanel, "Выберете основной цвет", Color.pink);
                Color additionalColor = JColorChooser.showDialog(mainPanel, "Выберете дополнительный цвет", Color.blue);
                ITransport transport = new MotorShip(100 + rnd.nextInt(200), 1000 + rnd.nextInt(1000), mainColor, additionalColor, true, true, true, true);
                if (((PierPanel) pierPanel).getPier().add(transport)) {
                    ((PierPanel) pierPanel).redraw();
                } else {
                    showDialog("Причал переполнен");
                }
            }
        });

        takeShipButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                ITransport ship = ((PierPanel) pierPanel).getPier().substract((int) pierPlaceSpinner.getValue());
                if (ship != null) {
                    ShipForm.drawPanel(ship);
                } else {
                    showDialog("Данное парковочное место свободно либо не существует");
                }
                ((PierPanel) pierPanel).redraw();
            }
        });

        this.setResizable(false);
        ((PierPanel) pierPanel).redraw();

        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent windowEvent) {
                ((PierPanel) pierPanel).resetPier();
                ((PierPanel) pierPanel).redraw();
            }

            @Override
            public void windowClosing(WindowEvent windowEvent) {
            }

            @Override
            public void windowClosed(WindowEvent windowEvent) {
                System.exit(0);
            }

            @Override
            public void windowIconified(WindowEvent windowEvent) {
            }

            @Override
            public void windowDeiconified(WindowEvent windowEvent) {
            }

            @Override
            public void windowActivated(WindowEvent windowEvent) {
            }

            @Override
            public void windowDeactivated(WindowEvent windowEvent) {
            }

        });
    }

    private void showDialog(String text) {
        JOptionPane.showMessageDialog(this, text);
    }

    public static void main(String[] args) {
        PierDialog dialog = new PierDialog();
        dialog.pack();
        dialog.setVisible(true);
        //System.exit(0);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setPreferredSize(new Dimension(1200, 800));
        pierPanel.setPreferredSize(new Dimension(1000, 800));
        mainPanel.add(pierPanel, BorderLayout.CENTER);
        controlsPanel = new JPanel();
        controlsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        controlsPanel.setPreferredSize(new Dimension(200, 800));
        mainPanel.add(controlsPanel, BorderLayout.EAST);
        createMotorShipButton = new JButton();
        createMotorShipButton.setText("Создать теплоход");
        controlsPanel.add(createMotorShipButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        createShipButton = new JButton();
        createShipButton.setText("Создать корабль");
        controlsPanel.add(createShipButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        controlsPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        controlsPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Забрать корабль");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Номер места:");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pierPlaceSpinner = new JSpinner();
        panel1.add(pierPlaceSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        takeShipButton = new JButton();
        takeShipButton.setLabel("Забрать корабль");
        takeShipButton.setText("Забрать корабль");
        panel1.add(takeShipButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        pierPanel = new PierPanel();
    }
}
